---
import { getCollection, type CollectionEntry } from "astro:content";
import Layout from "../../layouts/Layout.astro";
import { Icon } from "astro-icon/components";
import { formatDate } from "../../lib/utils";
import { blogWebsite, getArticleSchema, mainWebsite, personSchema } from "../../lib/data/structuredData";
import Badge from "../../components/Badge.astro";
import BlogTableOfContents from "../../components/BlogTableOfContents.astro";
import BlogNavigationCard from "../../components/BlogNavigationCard.astro";

interface Props {
	post: CollectionEntry<"blog">;
	previousPost: CollectionEntry<"blog"> | null;
	nextPost: CollectionEntry<"blog"> | null;
}

export async function getStaticPaths() {
	const blogPosts = (await getCollection("blog")).sort((a, b) => new Date(b.data.date).getTime() - new Date(a.data.date).getTime());
	console.log(blogPosts.map((post) => post.id));

	return blogPosts.map((post: CollectionEntry<"blog">) => ({
		params: { slug: post.slug },
		props: {
			post,
			previousPost: blogPosts[blogPosts.indexOf(post) - 1] || null,
			nextPost: blogPosts[blogPosts.indexOf(post) + 1] || null,
		},
	}));
}

const { post, previousPost, nextPost } = Astro.props;
const { Content, headings } = await post.render();

const articleStructuredData = getArticleSchema(post);

const breadcrumbsStructuredData = {
	"@context": "https://schema.org",
	"@type": "BreadcrumbList",
	itemListElement: [
		{
			"@type": "ListItem",
			position: 1,
			name: "Home",
			item: `${import.meta.env.SITE}/`,
		},
		{
			"@type": "ListItem",
			position: 2,
			name: "Blog",
			item: `${import.meta.env.SITE}/blog/`,
		},
		{
			"@type": "ListItem",
			position: 3,
			name: post.data.title,
			item: `${import.meta.env.SITE}/blog/${post.slug}/`,
		},
	],
};

const jsonLd = {
	"@context": "https://schema.org",
	"@graph": [articleStructuredData, breadcrumbsStructuredData, blogWebsite, mainWebsite, personSchema],
};

function getReadingTime(content: string) {
	const wordsPerMinute = 200;
	const wordCount = content.trim().split(/\s+/).length;
	return Math.ceil(wordCount / wordsPerMinute);
}
---

<script is:inline>
	window.addEventListener("DOMContentLoaded", () => {
		const headerOffset = document.getElementById("header")?.offsetHeight ?? 64;

		// Inject anchor links next to headings
		const levels = ["h2", "h3", "h4", "h5", "h6"];
		const headings = document.querySelectorAll(levels.map((tag) => `article ${tag}[id]`).join(","));

		// Add anchor links to headings
		headings.forEach((heading) => {
			const id = heading.getAttribute("id");
			if (!id) return;

			// Avoid duplicates
			if (heading.querySelector(".anchor-link")) return;

			// Create # anchor
			const anchor = document.createElement("a");
			anchor.href = `#${id}`;
			anchor.textContent = "#";
			anchor.className = "anchor-link opacity-0 ml-2 group-hover:opacity-100 text-muted hover:text-primary transition";

			// Accessibility
			anchor.setAttribute("aria-label", `Link to heading ${heading.textContent?.trim()}`);
			anchor.setAttribute("tabindex", "0");
			anchor.setAttribute("role", "link");
			anchor.classList.add("focus:outline-none", "focus:opacity-100", "focus-visible:ring", "focus-visible:ring-primary");

			// Add layout classes to heading
			heading.setAttribute("tabindex", "-1");
			heading.classList.add("group", "relative");
			heading.appendChild(anchor);
		});

		// Smooth scroll with offset for all in-page # links
		document.querySelectorAll('a[href^="#"]').forEach((anchor) => {
			anchor.addEventListener("click", function (e) {
				const targetId = anchor.getAttribute("href");
				const targetElement = document.querySelector(targetId);
				if (!targetElement) return;

				e.preventDefault();

				const elementPosition = targetElement.getBoundingClientRect().top + window.scrollY;
				const offsetPosition = elementPosition - headerOffset;

				window.scrollTo({
					top: offsetPosition,
					behavior: "smooth",
				});

				history.pushState(null, "", targetId);
			});
		});

	});

  // Show scroll progress
  window.addEventListener("scroll", () => {
    const scrollTop = window.scrollY;
    const docHeight = document.body.scrollHeight - window.innerHeight;
    const scrollPercent = (scrollTop / docHeight) * 100;
    document.getElementById("scroll-progress").style.width = `${scrollPercent}%`;
  });
</script>

<Layout title={post.data.title} description={post.data.description} tags={post.data.tags} jsonLd={JSON.stringify(jsonLd)}>
	<div id="scroll-progress" class="fixed top-16 left-0 h-1 bg-primary z-50 shadow-md transition-all" style="width: 0%"></div>

	<div id="blog-header" class="flex items-center gap-4 w-full">
		<a class="w-fit rounded-full bg-accent-contrast p-2 ring-1 ring-muted" aria-label="Back" href="/blog/">
			<Icon size="16" name="mdi:arrow-left" />
		</a>
		<span class="text-muted">|</span>
		<p>{formatDate(post.data.date, { month: "long", year: "numeric" })} • {getReadingTime(post.body)} min read</p>
	</div>

	<div class="grid grid-cols-1 md:grid-cols-4 gap-4">
		<article id="blog-body" class="grid col-span-1 md:col-span-3 prose dark:prose-invert hide-scrollbar">
			<h1 class="text-4xl font-bold my-2">{post.data.title}</h1>

			{
				post.data.tags?.length && (
					<div class="flex flex-wrap gap-2 my-2">
						{post.data.tags.map((tag) => (
							<Badge>#{tag}</Badge>
						))}
					</div>
				)
			}

			<Content />

			{
				(previousPost || nextPost) && (
					<div class={`grid gap-4 pt-8 border-t border-border ${previousPost && nextPost ? "grid-cols-1 md:grid-cols-2" : "grid-cols-1"}`}>
						{previousPost && <BlogNavigationCard label="← Previous" post={previousPost} />}
						{nextPost && <BlogNavigationCard label="Next →" post={nextPost} />}
					</div>
				)
			}
		</article>
		<aside id="blog-index" class="hidden md:block shrink-0 sticky top-20 h-fit border-l border-border pl-4 overflow-x-hidden">
			<BlogTableOfContents headings={headings} />
		</aside>
	</div>
</Layout>
