---
import { getCollection, type CollectionEntry } from "astro:content";
import Layout from "../../layouts/Layout.astro";
import { Icon } from "astro-icon/components";
import { formatDate } from "../../lib/utils";
import { blogWebsite, getArticleSchema, mainWebsite, personSchema } from "../../lib/data/structuredData";
import TableOfContents from "../../components/TableOfContents.astro";
import Badge from "../../components/Badge.astro";

interface Props {
	post: CollectionEntry<"blog">;
}

export async function getStaticPaths() {
	const blogPosts = await getCollection("blog");
	return blogPosts.map((post: CollectionEntry<"blog">) => ({
		params: { slug: post.slug },
		props: { post },
	}));
}

const { post } = Astro.props;
const { Content, headings } = await post.render();

const articleStructuredData = getArticleSchema(post);

const breadcrumbsStructuredData = {
	"@context": "https://schema.org",
	"@type": "BreadcrumbList",
	itemListElement: [
		{
			"@type": "ListItem",
			position: 1,
			name: "Home",
			item: `${import.meta.env.SITE}/`,
		},
		{
			"@type": "ListItem",
			position: 2,
			name: "Blog",
			item: `${import.meta.env.SITE}/blog/`,
		},
		{
			"@type": "ListItem",
			position: 3,
			name: post.data.title,
			item: `${import.meta.env.SITE}/blog/${post.slug}/`,
		},
	],
};

const jsonLd = {
	"@context": "https://schema.org",
	"@graph": [articleStructuredData, breadcrumbsStructuredData, blogWebsite, mainWebsite, personSchema],
};
---

<script>
	document.querySelectorAll<HTMLAnchorElement>('a[href^="#"]').forEach((anchor) => {
		anchor.addEventListener("click", function (e: MouseEvent) {
			e.preventDefault();

			const targetId = (anchor.getAttribute("href") as string) ?? "";
			const targetElement = document.querySelector(targetId) as HTMLElement | null;

			if (!targetElement) return;

			const headerOffset = document.getElementById("header")?.offsetHeight ?? 64;
			const elementPosition = targetElement.getBoundingClientRect().top + window.scrollY;
			const offsetPosition = elementPosition - headerOffset;

			window.scrollTo({
				top: offsetPosition,
				behavior: "smooth",
			});
		});
	});
</script>

<Layout title={post.data.title} description={post.data.description} tags={post.data.tags} jsonLd={JSON.stringify(jsonLd)}>
	<script type="application/ld+json" set:html={JSON.stringify(jsonLd)} is:inline />

	<div id="blog-header" class="flex items-center gap-4 mb-4 w-full">
		<a class="w-fit rounded-full bg-accent-contrast p-2 ring-1 ring-muted" aria-label="Back" href="/">
			<Icon size="16" name="mdi:arrow-left" />
		</a>
		<span class="text-muted">|</span>
		<p>{formatDate(post.data.date, { month: "long", year: "numeric" })}</p>
	</div>

	<div class="grid grid-cols-1 md:grid-cols-4 gap-4">
		<div id="divider" class="w-full border-t border-border md:hidden mt-12 mb-8"></div>

		<article id="blog-body" class="grid col-span-1 md:col-span-3 prose dark:prose-invert mb-2 hide-scrollbar">
			<h1 class="text-4xl font-bold mb-2">{post.data.title}</h1>

			{
				post.data.tags?.length && (
					<div class="flex flex-wrap gap-2 mt-4">
						{post.data.tags.map((tag) => (
							<Badge>#{tag}</Badge>
						))}
					</div>
				)
			}

			<p class="lead">{post.data.description}</p>

			<Content />
		</article>
		<aside id="blog-index" class="hidden md:block w-64 shrink-0 sticky top-20 h-fit border-l border-border pl-4">
			<TableOfContents headings={headings} />
		</aside>
	</div>
</Layout>
