<span id="astro-color-scheme-switch">
	<slot />
</span>

<style>
	:global(.dark) {
		color-scheme: dark;
	}
</style>

<script>
	// Initialize the theme on client load
	window.onload = init;

	// Initialise the theme on page swap (Required for ViewTransition)
	document.addEventListener("astro:after-swap", init);

	// Listen for changes to the prefers-color-scheme
	window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change", (event) => {
		setup(event.matches ? "dark" : "light");
	});

	// Set the theme, prioritizing local storage  system preference
	function init() {
		const local = localStorage.getItem("theme");
		const system = window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light";
		setup(local ?? system);
	}

	// Setup the theme switcher
	function setup(theme: string) {
		const themeSwitch = document.getElementById("astro-color-scheme-switch");
		const eventType = "click";
		const element = themeSwitch?.querySelector("button");
		if (!element) {
			throw new Error(`<button> element must be present inside 'themeSwitch' or change the 'strategy' attribute`);
		}

		element.value = theme;

		update(theme);

		element.addEventListener(eventType, (event) => {
			const button = event.currentTarget as HTMLButtonElement;
			const theme = button.value === "dark" ? "light" : "dark";
			button.value = theme;
			update(theme);
		});
	}

	// Update the theme
	function update(value: string) {
		localStorage.setItem("theme", value);
		document.documentElement.classList.remove("light", "dark");
		document.documentElement.classList.add(value);
	}
</script>
