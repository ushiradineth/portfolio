---
import "@fontsource-variable/roboto-mono";

import Footer from "../components/Footer.astro";
import Header from "../components/Header.astro";
import { ViewTransitions } from "astro:transitions";
import Analytics from "@vercel/analytics/astro";
import SpeedInsights from "@vercel/speed-insights/astro";

import { blogWebsite, mainWebsite, personSchema } from "../lib/data/structuredData";

interface Props {
	title: string;
	description: string;
	tags?: string[];
	jsonLd?: string;
}

const pathname = Astro.url.pathname.endsWith("/") ? Astro.url.pathname.slice(0, -1) : Astro.url.pathname || "index";

const siteURL = Astro.site?.toString() ?? "";
const site = siteURL[siteURL.length - 1] === "/" ? siteURL.substring(0, siteURL.length - 1) : Astro.site;
const ogImage = new URL(`/og${pathname}.png`, site).toString();
const canonicalURL = new URL(Astro.url.pathname, Astro.site);
const defaultTags = ["Ushira Dineth", "Software Engineer", "Portfolio"];

const { title, description, tags: providedTags, jsonLd: providedJsonLd } = Astro.props;

const tags = [...defaultTags, ...(providedTags ? providedTags : [])];
const jsonLd =
	providedJsonLd ??
	JSON.stringify({
		"@context": "https://schema.org",
		"@graph": [mainWebsite, blogWebsite, personSchema],
	});
---

<!doctype html>
<html lang="en" class="dark">
	<head>
		<title>{title}</title>
		<meta charset="UTF-8" />
		<meta name="description" content={description} />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<meta name="keywords" content={tags.join(", ")} />
		<meta name="author" content="Ushira Dineth" />
		<meta name="generator" content={Astro.generator} />
		<meta name="robots" content="index, follow" />
		<meta property="og:title" content={title} />
		<meta property="og:image" content={ogImage} />
		<meta property="og:type" content="profile" />
		<meta property="og:url" content={canonicalURL} />
		<meta property="og:description" content={description} />
		<meta property="og:locale" content="en_GB" />
		<meta property="twitter:image" content={ogImage} />
		<meta property="twitter:card" content="summary_large_image" />
		<meta property="twitter:title" content={title} />
		<meta property="twitter:description" content={description} />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<link rel="sitemap" href="/sitemap-index.xml" />
		<link rel="canonical" href={canonicalURL} />
		<script type="application/ld+json" set:html={jsonLd} is:inline />

		<script is:inline>
			const local = localStorage.getItem("theme");
			const system = window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light";

			const theme = local ?? system;
			document.documentElement.classList.remove("light", "dark");
			document.documentElement.classList.add(theme);
		</script>

		<style is:global>
			:root {
				--text: 16, 22, 25; /* #101619 */
				--background: 247, 252, 254; /* #f7fcfe */
				--primary: 46, 82, 97; /* #2e5261 */
				--accent: 255, 241, 242; /* #fecdd3 (rose-200) */
				--accent-contrast: 241, 245, 249; /* #f1f5f9 */
				--muted: 113, 113, 122; /* #71717a */
				--border: 24, 24, 27, 0.1; /* #18181b1a */
			}

			.dark {
				--text: 243, 243, 242; /* #f3f3f2 */
				--background: 18, 18, 18; /* #121212 */
				--primary: 159, 195, 210; /* #9fc3d2 */
				--accent: 15, 23, 42; /* #0f172a (slate-900) */
				--accent-contrast: 30, 41, 59; /* #1e293b (slate-800) */
				--muted: 156, 163, 175; /* #9ca3af */
				--border: 255, 255, 255, 0.1; /* #ffffff1a */
			}

			hr {
				border-color: rgba(var(--border)) !important;
			}

			p:has(img):has(em) img {
				margin-bottom: 0 !important;
			}

			p:has(img):has(em) {
				display: flex;
				flex-direction: column;
				justify-content: center;
				align-items: center;
			}

			/* Astro Icon Configuration */
			[data-icon] {
				font-size: 1.5rem;
				color: var(--text);
			}
			/* --- */

			/* Shiki Configuration */
			code[data-theme*=" "],
			code[data-theme*=" "] span {
				color: var(--shiki-light);
				background-color: var(--shiki-light-bg);
			}

			.dark code[data-theme*=" "],
			.dark code[data-theme*=" "] span {
				color: var(--shiki-dark);
				background-color: var(--shiki-dark-bg);
			}

			code > span {
				padding-right: 8px;
			}

			code {
				font-size: 0.875rem;
				line-height: 1.25rem;
			}

			figure,
			pre,
			code {
				overflow-x: auto;
				padding: 0 0 0 0 !important;
				margin: 0 0 0 0 !important;
			}

			code {
				padding: 10px 20px 10px 10px !important;
				@apply hide-scrollbar;
			}

			pre > code {
				counter-reset: line;
			}

			code[data-line-numbers] > [data-line]::before {
				counter-increment: line;
				content: counter(line);
				display: inline-block;
				width: 1.5rem;
				text-align: right;
				color: rgb(var(--muted));
			}
			/* --- */

			.hide-scrollbar::-webkit-scrollbar {
				display: none;
			}

			.hide-scrollbar {
				-ms-overflow-style: none; /* IE and Edge */
				scrollbar-width: none; /* Firefox */
			}

			/* Continuous gradient animation */
			@keyframes moveGradient {
				0% {
					background-position: 50% 50%;
				}
				20% {
					background-position: 100% 100%;
				}
				40% {
					background-position: 0% 0%;
				}
				60% {
					background-position: 100% -100%;
				}
				80% {
					background-position: -100% 100%;
				}
				100% {
					background-position: 50% 50%;
				}
			}

			.custom-gradient {
				background: radial-gradient(ellipse at center, rgba(var(--accent), 1), rgba(var(--background), 1));
				filter: url(#grainy);
				background-size: 200% 200%;
				animation: moveGradient 24s ease infinite;
				-webkit-backdrop-filter: blur(3px);
				backdrop-filter: blur(3px);
			}
		</style>

		<ViewTransitions />
	</head>
	<body class="flex flex-col items-center text-pretty font-roboto tracking-tight text-text">
		<main role="main" id="main-content" class="flex w-full justify-center">
			<div id="content" class="flex min-h-screen w-full max-w-[1080px] flex-col">
				<Header transition:persist />
				<main class="flex min-w-[50%] flex-col gap-4 px-4 py-8">
					<slot />
				</main>
				<Footer />
				<Analytics />
				<SpeedInsights />
			</div>
			<div id="background" class="custom-gradient fixed -z-10 flex h-full w-full flex-col gap-4 bg-sky-200">
				<svg width="0" height="0">
					<filter id="grainy" x="0" y="0" width="100%" height="100%">
						<feTurbulence type="fractalNoise" baseFrequency="1"></feTurbulence>
						<feColorMatrix type="saturate" values="0"></feColorMatrix>
						<feBlend in="SourceGraphic" mode="multiply"></feBlend>
					</filter>
				</svg>
			</div>
		</main>
	</body>
</html>
